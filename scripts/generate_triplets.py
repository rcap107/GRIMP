"""
This script is used to dump the triplets generated by the heterograph
in a format that can be exploited by link prediction systems.
"""

import pandas as pd
import random


def prepare_triplets(df_orig: pd.DataFrame, df_dirty: pd.DataFrame, valid_fraction=0.2):
    train_valid_triplets = []
    test_triplets = []

    for idx, row in df_dirty.iterrows():
        for col in df_dirty.columns:
            if pd.isna(df_dirty.loc[idx, col]):
                triplet = (idx, col, df_orig.loc[idx, col])
                test_triplets.append(triplet)
            else:
                triplet = (idx, col, df_dirty.loc[idx, col])
                train_valid_triplets.append(triplet)

    train_triplets = random.choices(
        train_valid_triplets, k=int((1 - valid_fraction) * len(train_valid_triplets))
    )
    valid_triplets = [_ for _ in train_valid_triplets if _ not in train_triplets]

    return train_triplets, valid_triplets, test_triplets


def write_triplets(train, test, valid):
    for case, triplets in zip(["train", "valid", "test"], [train, test, valid]):
        with open(f"{case}.tsv", "w") as fp:
            for triplet in triplets:
                s = "\t".join([str(_) for _ in triplet]) + "\n"
                fp.write(s)


if __name__ == "__main__":
    df_orig = pd.read_csv("data/main-exp-batch/new_datasets/mammogram.csv")
    df_dirty = pd.read_csv(
        "data/main-exp-batch/new_datasets_dirty/mammogram_all_columns_20.csv"
    )

    train, test, valid = prepare_triplets(df_orig, df_dirty)
    write_triplets(train, test, valid)
